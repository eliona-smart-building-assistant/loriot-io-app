/*
 * Loriot.io app API
 *
 * API to access and configure the Loriot.io app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiservices

import (
	"context"
	"loriot-io/apiserver"
	"loriot-io/conf"
	"loriot-io/eliona"
	"loriot-io/loriot"
	"net/http"
)

// DevicesAPIService is a service that implements the logic for the DevicesAPIServicer
// This service should implement the business logic for every endpoint for the DevicesAPI API.
// Include any external packages or services that will be required by this service.
type DevicesAPIService struct {
}

// NewDevicesAPIService creates a default api service
func NewDevicesAPIService() apiserver.DevicesAPIServicer {
	return &DevicesAPIService{}
}

// GetDevices - Get LoRaWAN devices
func (s *DevicesAPIService) GetDevices(ctx context.Context) (apiserver.ImplResponse, error) {
	devices, err := conf.GetDeviceAssets(ctx)
	if err != nil {
		return apiserver.ImplResponse{}, err
	}
	return apiserver.Response(http.StatusOK, devices), err
}

// PostDevice - Creates a new LoRaWAN device
func (s *DevicesAPIService) PostDevice(ctx context.Context, type_ string, postDeviceRequest apiserver.PostDeviceRequest) (apiserver.ImplResponse, error) {
	configs, err := conf.GetConfigs(ctx)
	if err != nil {
		return apiserver.ImplResponse{}, err
	}
	var deviceAssets []apiserver.DeviceAsset
	for _, config := range configs {
		device, err := loriot.UpsertDevice(ctx, config, type_, postDeviceRequest)
		if err != nil {
			return apiserver.ImplResponse{}, err
		}
		if device != nil {
			for _, projectID := range conf.ProjIds(config) {
				asset, err := eliona.UpsertAsset(ctx, projectID, postDeviceRequest)
				if err != nil {
					return apiserver.ImplResponse{}, err
				}
				deviceAsset, err := conf.UpsertDeviceAsset(ctx, config, *device, asset, 201)
				if err != nil {
					return apiserver.ImplResponse{}, err
				}
				deviceAssets = append(deviceAssets, deviceAsset)
			}
		}
	}
	return apiserver.Response(http.StatusOK, deviceAssets), err
}
